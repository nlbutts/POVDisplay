ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM_Enable, %function
  24              	PWM_Enable:
  25              	.LFB2:
  26              		.file 1 "Generated_Source\\PSoC5\\PWM.c"
   1:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM.c **** * File Name: PWM.c
   3:Generated_Source\PSoC5/PWM.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM.c **** *
   5:Generated_Source\PSoC5/PWM.c **** * Description:
   6:Generated_Source\PSoC5/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM.c **** *
  15:Generated_Source\PSoC5/PWM.c **** * Note:
  16:Generated_Source\PSoC5/PWM.c **** *
  17:Generated_Source\PSoC5/PWM.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM.c **** 
  24:Generated_Source\PSoC5/PWM.c **** #include "PWM.h"
  25:Generated_Source\PSoC5/PWM.c **** 
  26:Generated_Source\PSoC5/PWM.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 2


  32:Generated_Source\PSoC5/PWM.c **** uint8 PWM_initVar = 0u;
  33:Generated_Source\PSoC5/PWM.c **** 
  34:Generated_Source\PSoC5/PWM.c **** 
  35:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Start
  37:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM.c **** *
  39:Generated_Source\PSoC5/PWM.c **** * Summary:
  40:Generated_Source\PSoC5/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM.c **** *
  44:Generated_Source\PSoC5/PWM.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM.c **** *  None
  46:Generated_Source\PSoC5/PWM.c **** *
  47:Generated_Source\PSoC5/PWM.c **** * Return:
  48:Generated_Source\PSoC5/PWM.c **** *  None
  49:Generated_Source\PSoC5/PWM.c **** *
  50:Generated_Source\PSoC5/PWM.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM.c **** *
  54:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM.c **** void PWM_Start(void) 
  56:Generated_Source\PSoC5/PWM.c **** {
  57:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM.c ****     if(PWM_initVar == 0u)
  59:Generated_Source\PSoC5/PWM.c ****     {
  60:Generated_Source\PSoC5/PWM.c ****         PWM_Init();
  61:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
  62:Generated_Source\PSoC5/PWM.c ****     }
  63:Generated_Source\PSoC5/PWM.c ****     PWM_Enable();
  64:Generated_Source\PSoC5/PWM.c **** 
  65:Generated_Source\PSoC5/PWM.c **** }
  66:Generated_Source\PSoC5/PWM.c **** 
  67:Generated_Source\PSoC5/PWM.c **** 
  68:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Init
  70:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM.c **** *
  72:Generated_Source\PSoC5/PWM.c **** * Summary:
  73:Generated_Source\PSoC5/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM.c **** *  PWM_Start().
  76:Generated_Source\PSoC5/PWM.c **** *
  77:Generated_Source\PSoC5/PWM.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM.c **** *  None
  79:Generated_Source\PSoC5/PWM.c **** *
  80:Generated_Source\PSoC5/PWM.c **** * Return:
  81:Generated_Source\PSoC5/PWM.c **** *  None
  82:Generated_Source\PSoC5/PWM.c **** *
  83:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM.c **** void PWM_Init(void) 
  85:Generated_Source\PSoC5/PWM.c **** {
  86:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
  87:Generated_Source\PSoC5/PWM.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 3


  89:Generated_Source\PSoC5/PWM.c **** 
  90:Generated_Source\PSoC5/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
  92:Generated_Source\PSoC5/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM.c ****             uint8 PWM_interruptState;
  94:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM.c **** 
  97:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM.c **** 
 104:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM.c **** 
 107:Generated_Source\PSoC5/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 109:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 110:Generated_Source\PSoC5/PWM.c **** 
 111:Generated_Source\PSoC5/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM.c **** 
 115:Generated_Source\PSoC5/PWM.c ****     #elif (PWM_UseControl)
 116:Generated_Source\PSoC5/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM.c **** 
 123:Generated_Source\PSoC5/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM.c ****         #if (PWM_Resolution == 8)
 125:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM.c **** 
 133:Generated_Source\PSoC5/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM.c **** 
 136:Generated_Source\PSoC5/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM.c **** 
 138:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM.c ****         #else
 141:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM.c **** 
 145:Generated_Source\PSoC5/PWM.c ****         #if (PWM_KillModeMinTime)
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 4


 146:Generated_Source\PSoC5/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM.c **** 
 149:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM.c **** 
 153:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM.c **** 
 157:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM.c ****     #else
 163:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
 164:Generated_Source\PSoC5/PWM.c **** 
 165:Generated_Source\PSoC5/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM.c **** 
 171:Generated_Source\PSoC5/PWM.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 173:Generated_Source\PSoC5/PWM.c **** 
 174:Generated_Source\PSoC5/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM.c ****             PWM_ClearFIFO();
 177:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM.c **** }
 180:Generated_Source\PSoC5/PWM.c **** 
 181:Generated_Source\PSoC5/PWM.c **** 
 182:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Enable
 184:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM.c **** *
 186:Generated_Source\PSoC5/PWM.c **** * Summary:
 187:Generated_Source\PSoC5/PWM.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM.c **** *
 189:Generated_Source\PSoC5/PWM.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM.c **** *  None
 191:Generated_Source\PSoC5/PWM.c **** *
 192:Generated_Source\PSoC5/PWM.c **** * Return:
 193:Generated_Source\PSoC5/PWM.c **** *  None
 194:Generated_Source\PSoC5/PWM.c **** *
 195:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM.c **** *
 198:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM.c **** void PWM_Enable(void) 
 200:Generated_Source\PSoC5/PWM.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:Generated_Source\PSoC5/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM.c **** 
 207:Generated_Source\PSoC5/PWM.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
  32              		.loc 1 209 0
  33 0000 024A     		ldr	r2, .L2
  34 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  35 0004 43F08003 		orr	r3, r3, #128
  36 0008 1370     		strb	r3, [r2]
  37 000a 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 000c 76650040 		.word	1073767798
  42              		.cfi_endproc
  43              	.LFE2:
  44              		.size	PWM_Enable, .-PWM_Enable
  45              		.section	.text.PWM_Stop,"ax",%progbits
  46              		.align	2
  47              		.global	PWM_Stop
  48              		.thumb
  49              		.thumb_func
  50              		.type	PWM_Stop, %function
  51              	PWM_Stop:
  52              	.LFB3:
 210:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM.c **** }
 212:Generated_Source\PSoC5/PWM.c **** 
 213:Generated_Source\PSoC5/PWM.c **** 
 214:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Stop
 216:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM.c **** *
 218:Generated_Source\PSoC5/PWM.c **** * Summary:
 219:Generated_Source\PSoC5/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM.c **** *
 222:Generated_Source\PSoC5/PWM.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM.c **** *  None
 224:Generated_Source\PSoC5/PWM.c **** *
 225:Generated_Source\PSoC5/PWM.c **** * Return:
 226:Generated_Source\PSoC5/PWM.c **** *  None
 227:Generated_Source\PSoC5/PWM.c **** *
 228:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM.c **** *
 232:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM.c **** void PWM_Stop(void) 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 6


 234:Generated_Source\PSoC5/PWM.c **** {
  53              		.loc 1 234 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 235:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
  58              		.loc 1 236 0
  59 0000 024A     		ldr	r2, .L5
  60 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  61 0004 03F07F03 		and	r3, r3, #127
  62 0008 1370     		strb	r3, [r2]
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 76650040 		.word	1073767798
  68              		.cfi_endproc
  69              	.LFE3:
  70              		.size	PWM_Stop, .-PWM_Stop
  71              		.section	.text.PWM_WriteCounter,"ax",%progbits
  72              		.align	2
  73              		.global	PWM_WriteCounter
  74              		.thumb
  75              		.thumb_func
  76              		.type	PWM_WriteCounter, %function
  77              	PWM_WriteCounter:
  78              	.LFB4:
 237:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM.c **** 
 239:Generated_Source\PSoC5/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM.c **** }
 245:Generated_Source\PSoC5/PWM.c **** 
 246:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM.c **** 
 249:Generated_Source\PSoC5/PWM.c **** 
 250:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM.c ****         *
 254:Generated_Source\PSoC5/PWM.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM.c ****         *
 258:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM.c ****         *
 262:Generated_Source\PSoC5/PWM.c ****         * Return:
 263:Generated_Source\PSoC5/PWM.c ****         *  None
 264:Generated_Source\PSoC5/PWM.c ****         *
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 7


 265:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM.c ****         {
 268:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM.c **** 
 270:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:Generated_Source\PSoC5/PWM.c ****                 #else
 273:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM.c **** 
 276:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM.c **** 
 279:Generated_Source\PSoC5/PWM.c ****             #elif (PWM_UseControl)
 280:Generated_Source\PSoC5/PWM.c **** 
 281:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:Generated_Source\PSoC5/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM.c ****                 #else
 285:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM.c **** 
 288:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:Generated_Source\PSoC5/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM.c ****                 #else
 292:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM.c **** 
 295:Generated_Source\PSoC5/PWM.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM.c **** 
 300:Generated_Source\PSoC5/PWM.c ****             #else
 301:Generated_Source\PSoC5/PWM.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM.c ****         }
 304:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM.c **** 
 306:Generated_Source\PSoC5/PWM.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM.c **** 
 308:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM.c **** 
 310:Generated_Source\PSoC5/PWM.c **** 
 311:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM.c ****         *
 315:Generated_Source\PSoC5/PWM.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM.c ****         *
 318:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM.c ****         *
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 8


 322:Generated_Source\PSoC5/PWM.c ****         * Return:
 323:Generated_Source\PSoC5/PWM.c ****         *  None
 324:Generated_Source\PSoC5/PWM.c ****         *
 325:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM.c ****         {
 328:Generated_Source\PSoC5/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:Generated_Source\PSoC5/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM.c ****             #else
 332:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM.c **** 
 335:Generated_Source\PSoC5/PWM.c ****             #if (PWM_UseControl)
 336:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UseControl) */
 339:Generated_Source\PSoC5/PWM.c ****         }
 340:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM.c **** 
 342:Generated_Source\PSoC5/PWM.c **** #if (PWM_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM.c **** 
 344:Generated_Source\PSoC5/PWM.c **** 
 345:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM.c ****     *
 349:Generated_Source\PSoC5/PWM.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM.c ****     *
 352:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM.c ****     *
 356:Generated_Source\PSoC5/PWM.c ****     * Return:
 357:Generated_Source\PSoC5/PWM.c ****     *  None
 358:Generated_Source\PSoC5/PWM.c ****     *
 359:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM.c ****     {
 362:Generated_Source\PSoC5/PWM.c **** 
 363:Generated_Source\PSoC5/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM.c ****         #else
 367:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM.c **** 
 370:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseControl)
 371:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseControl) */
 374:Generated_Source\PSoC5/PWM.c ****     }
 375:Generated_Source\PSoC5/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM.c **** 
 377:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 9


 379:Generated_Source\PSoC5/PWM.c **** 
 380:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM.c **** 
 382:Generated_Source\PSoC5/PWM.c **** 
 383:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCounter
 385:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM.c ****     *
 387:Generated_Source\PSoC5/PWM.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM.c ****     *
 393:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM.c ****     *
 396:Generated_Source\PSoC5/PWM.c ****     * Return:
 397:Generated_Source\PSoC5/PWM.c ****     *  None
 398:Generated_Source\PSoC5/PWM.c ****     *
 399:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM.c ****     *
 402:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCounter(uint16 counter) \
 404:Generated_Source\PSoC5/PWM.c ****                                        
 405:Generated_Source\PSoC5/PWM.c ****     {
  79              		.loc 1 405 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
 406:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_COUNTER_LSB_PTR, counter);
  85              		.loc 1 406 0
  86 0000 014B     		ldr	r3, .L8
  87 0002 1880     		strh	r0, [r3]	@ movhi
  88 0004 7047     		bx	lr
  89              	.L9:
  90 0006 00BF     		.align	2
  91              	.L8:
  92 0008 086A0040 		.word	1073768968
  93              		.cfi_endproc
  94              	.LFE4:
  95              		.size	PWM_WriteCounter, .-PWM_WriteCounter
  96              		.section	.text.PWM_ReadCounter,"ax",%progbits
  97              		.align	2
  98              		.global	PWM_ReadCounter
  99              		.thumb
 100              		.thumb_func
 101              		.type	PWM_ReadCounter, %function
 102              	PWM_ReadCounter:
 103              	.LFB5:
 407:Generated_Source\PSoC5/PWM.c ****     }
 408:Generated_Source\PSoC5/PWM.c **** 
 409:Generated_Source\PSoC5/PWM.c **** 
 410:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 10


 411:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCounter
 412:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM.c ****     *
 414:Generated_Source\PSoC5/PWM.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM.c ****     *
 418:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM.c ****     *  None
 420:Generated_Source\PSoC5/PWM.c ****     *
 421:Generated_Source\PSoC5/PWM.c ****     * Return:
 422:Generated_Source\PSoC5/PWM.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM.c ****     *
 424:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM.c ****     uint16 PWM_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM.c ****     {
 104              		.loc 1 426 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
 109              		.loc 1 430 0
 110 0000 024B     		ldr	r3, .L11
 111 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM.c **** 
 432:Generated_Source\PSoC5/PWM.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG16(PWM_CAPTURE_LSB_PTR));
 112              		.loc 1 433 0
 113 0004 024B     		ldr	r3, .L11+4
 114 0006 1888     		ldrh	r0, [r3]
 434:Generated_Source\PSoC5/PWM.c ****     }
 115              		.loc 1 434 0
 116 0008 80B2     		uxth	r0, r0
 117 000a 7047     		bx	lr
 118              	.L12:
 119              		.align	2
 120              	.L11:
 121 000c 14650040 		.word	1073767700
 122 0010 A86A0040 		.word	1073769128
 123              		.cfi_endproc
 124              	.LFE5:
 125              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 126              		.section	.text.PWM_WritePeriod,"ax",%progbits
 127              		.align	2
 128              		.global	PWM_WritePeriod
 129              		.thumb
 130              		.thumb_func
 131              		.type	PWM_WritePeriod, %function
 132              	PWM_WritePeriod:
 133              	.LFB7:
 435:Generated_Source\PSoC5/PWM.c **** 
 436:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus)
 437:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 11


 438:Generated_Source\PSoC5/PWM.c **** 
 439:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM.c ****         *
 443:Generated_Source\PSoC5/PWM.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM.c ****         *
 446:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM.c ****         *  None
 448:Generated_Source\PSoC5/PWM.c ****         *
 449:Generated_Source\PSoC5/PWM.c ****         * Return:
 450:Generated_Source\PSoC5/PWM.c ****         *  None
 451:Generated_Source\PSoC5/PWM.c ****         *
 452:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM.c ****         void PWM_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM.c ****         {
 455:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM.c ****             {
 457:Generated_Source\PSoC5/PWM.c ****                 (void)PWM_ReadCapture();
 458:Generated_Source\PSoC5/PWM.c ****             }
 459:Generated_Source\PSoC5/PWM.c ****         }
 460:Generated_Source\PSoC5/PWM.c **** 
 461:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_UseStatus */
 462:Generated_Source\PSoC5/PWM.c **** 
 463:Generated_Source\PSoC5/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM.c **** 
 465:Generated_Source\PSoC5/PWM.c **** 
 466:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_WritePeriod
 468:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM.c **** *
 470:Generated_Source\PSoC5/PWM.c **** * Summary:
 471:Generated_Source\PSoC5/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM.c **** *
 474:Generated_Source\PSoC5/PWM.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM.c **** *
 478:Generated_Source\PSoC5/PWM.c **** * Return:
 479:Generated_Source\PSoC5/PWM.c **** *  None
 480:Generated_Source\PSoC5/PWM.c **** *
 481:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM.c **** void PWM_WritePeriod(uint16 period) 
 483:Generated_Source\PSoC5/PWM.c **** {
 134              		.loc 1 483 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL1:
 484:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM.c ****     #else
 487:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, period);
 140              		.loc 1 487 0
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 12


 141 0000 014B     		ldr	r3, .L14
 142 0002 1880     		strh	r0, [r3]	@ movhi
 143 0004 7047     		bx	lr
 144              	.L15:
 145 0006 00BF     		.align	2
 146              	.L14:
 147 0008 886A0040 		.word	1073769096
 148              		.cfi_endproc
 149              	.LFE7:
 150              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 151              		.section	.text.PWM_WriteCompare,"ax",%progbits
 152              		.align	2
 153              		.global	PWM_WriteCompare
 154              		.thumb
 155              		.thumb_func
 156              		.type	PWM_WriteCompare, %function
 157              	PWM_WriteCompare:
 158              	.LFB8:
 488:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM.c **** }
 490:Generated_Source\PSoC5/PWM.c **** 
 491:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM.c **** 
 493:Generated_Source\PSoC5/PWM.c **** 
 494:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare
 496:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM.c ****     *
 498:Generated_Source\PSoC5/PWM.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM.c ****     *
 505:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM.c ****     *
 508:Generated_Source\PSoC5/PWM.c ****     * Return:
 509:Generated_Source\PSoC5/PWM.c ****     *  None
 510:Generated_Source\PSoC5/PWM.c ****     *
 511:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM.c ****     *
 515:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare(uint16 compare) \
 517:Generated_Source\PSoC5/PWM.c ****                                        
 518:Generated_Source\PSoC5/PWM.c ****     {
 159              		.loc 1 518 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.LVL2:
 519:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 13


 521:Generated_Source\PSoC5/PWM.c ****         #else
 522:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, compare);
 165              		.loc 1 522 0
 166 0000 014B     		ldr	r3, .L17
 167 0002 1880     		strh	r0, [r3]	@ movhi
 168 0004 7047     		bx	lr
 169              	.L18:
 170 0006 00BF     		.align	2
 171              	.L17:
 172 0008 486A0040 		.word	1073769032
 173              		.cfi_endproc
 174              	.LFE8:
 175              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 176              		.section	.text.PWM_WriteDeadTime,"ax",%progbits
 177              		.align	2
 178              		.global	PWM_WriteDeadTime
 179              		.thumb
 180              		.thumb_func
 181              		.type	PWM_WriteDeadTime, %function
 182              	PWM_WriteDeadTime:
 183              	.LFB9:
 523:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM.c **** 
 525:Generated_Source\PSoC5/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM.c ****             #else
 529:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM.c ****     }
 533:Generated_Source\PSoC5/PWM.c **** 
 534:Generated_Source\PSoC5/PWM.c **** 
 535:Generated_Source\PSoC5/PWM.c **** #else
 536:Generated_Source\PSoC5/PWM.c **** 
 537:Generated_Source\PSoC5/PWM.c **** 
 538:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM.c ****     *
 542:Generated_Source\PSoC5/PWM.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM.c ****     *
 548:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM.c ****     *
 551:Generated_Source\PSoC5/PWM.c ****     * Return:
 552:Generated_Source\PSoC5/PWM.c ****     *  None
 553:Generated_Source\PSoC5/PWM.c ****     *
 554:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare1(uint16 compare) \
 556:Generated_Source\PSoC5/PWM.c ****                                         
 557:Generated_Source\PSoC5/PWM.c ****     {
 558:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 14


 559:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM.c ****         #else
 561:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM.c ****     }
 564:Generated_Source\PSoC5/PWM.c **** 
 565:Generated_Source\PSoC5/PWM.c **** 
 566:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM.c ****     *
 570:Generated_Source\PSoC5/PWM.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM.c ****     *
 577:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM.c ****     *
 580:Generated_Source\PSoC5/PWM.c ****     * Return:
 581:Generated_Source\PSoC5/PWM.c ****     *  None
 582:Generated_Source\PSoC5/PWM.c ****     *
 583:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare2(uint16 compare) \
 585:Generated_Source\PSoC5/PWM.c ****                                         
 586:Generated_Source\PSoC5/PWM.c ****     {
 587:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM.c ****         #else
 590:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM.c ****     }
 593:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM.c **** 
 595:Generated_Source\PSoC5/PWM.c **** #if (PWM_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM.c **** 
 597:Generated_Source\PSoC5/PWM.c **** 
 598:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM.c ****     *
 602:Generated_Source\PSoC5/PWM.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM.c ****     *
 605:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM.c ****     *
 608:Generated_Source\PSoC5/PWM.c ****     * Return:
 609:Generated_Source\PSoC5/PWM.c ****     *  None
 610:Generated_Source\PSoC5/PWM.c ****     *
 611:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM.c ****     {
 184              		.loc 1 613 0
 185              		.cfi_startproc
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 15


 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL3:
 614:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 190              		.loc 1 616 0
 191 0000 014B     		ldr	r3, .L20
 192 0002 1870     		strb	r0, [r3]
 193 0004 7047     		bx	lr
 194              	.L21:
 195 0006 00BF     		.align	2
 196              	.L20:
 197 0008 26650040 		.word	1073767718
 198              		.cfi_endproc
 199              	.LFE9:
 200              		.size	PWM_WriteDeadTime, .-PWM_WriteDeadTime
 201              		.section	.text.PWM_ReadDeadTime,"ax",%progbits
 202              		.align	2
 203              		.global	PWM_ReadDeadTime
 204              		.thumb
 205              		.thumb_func
 206              		.type	PWM_ReadDeadTime, %function
 207              	PWM_ReadDeadTime:
 208              	.LFB10:
 617:Generated_Source\PSoC5/PWM.c ****         #else
 618:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM.c **** 
 622:Generated_Source\PSoC5/PWM.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM.c ****             #else
 627:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM.c **** 
 630:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM.c ****     }
 632:Generated_Source\PSoC5/PWM.c **** 
 633:Generated_Source\PSoC5/PWM.c **** 
 634:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM.c ****     *
 638:Generated_Source\PSoC5/PWM.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM.c ****     *
 641:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM.c ****     *  None
 643:Generated_Source\PSoC5/PWM.c ****     *
 644:Generated_Source\PSoC5/PWM.c ****     * Return:
 645:Generated_Source\PSoC5/PWM.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM.c ****     *
 647:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 16


 648:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM.c ****     {
 209              		.loc 1 649 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 650:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 214              		.loc 1 652 0
 215 0000 014B     		ldr	r3, .L23
 216 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 653:Generated_Source\PSoC5/PWM.c ****         #else
 654:Generated_Source\PSoC5/PWM.c **** 
 655:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:Generated_Source\PSoC5/PWM.c ****             #else
 660:Generated_Source\PSoC5/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM.c ****     }
 217              		.loc 1 663 0
 218 0004 7047     		bx	lr
 219              	.L24:
 220 0006 00BF     		.align	2
 221              	.L23:
 222 0008 26650040 		.word	1073767718
 223              		.cfi_endproc
 224              	.LFE10:
 225              		.size	PWM_ReadDeadTime, .-PWM_ReadDeadTime
 226              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 227              		.align	2
 228              		.global	PWM_SetInterruptMode
 229              		.thumb
 230              		.thumb_func
 231              		.type	PWM_SetInterruptMode, %function
 232              	PWM_SetInterruptMode:
 233              	.LFB11:
 664:Generated_Source\PSoC5/PWM.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM.c **** 
 666:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM.c **** 
 668:Generated_Source\PSoC5/PWM.c **** 
 669:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM.c ****     *
 673:Generated_Source\PSoC5/PWM.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM.c ****     *
 677:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 17


 680:Generated_Source\PSoC5/PWM.c ****     * Return:
 681:Generated_Source\PSoC5/PWM.c ****     *  None
 682:Generated_Source\PSoC5/PWM.c ****     *
 683:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM.c ****     {
 234              		.loc 1 685 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL4:
 686:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 240              		.loc 1 686 0
 241 0000 014B     		ldr	r3, .L26
 242 0002 1870     		strb	r0, [r3]
 243 0004 7047     		bx	lr
 244              	.L27:
 245 0006 00BF     		.align	2
 246              	.L26:
 247 0008 85650040 		.word	1073767813
 248              		.cfi_endproc
 249              	.LFE11:
 250              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 251              		.section	.text.PWM_ReadStatusRegister,"ax",%progbits
 252              		.align	2
 253              		.global	PWM_ReadStatusRegister
 254              		.thumb
 255              		.thumb_func
 256              		.type	PWM_ReadStatusRegister, %function
 257              	PWM_ReadStatusRegister:
 258              	.LFB12:
 687:Generated_Source\PSoC5/PWM.c ****     }
 688:Generated_Source\PSoC5/PWM.c **** 
 689:Generated_Source\PSoC5/PWM.c **** 
 690:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM.c ****     *
 694:Generated_Source\PSoC5/PWM.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM.c ****     *
 697:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM.c ****     *  None
 699:Generated_Source\PSoC5/PWM.c ****     *
 700:Generated_Source\PSoC5/PWM.c ****     * Return:
 701:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM.c ****     *
 710:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 18


 712:Generated_Source\PSoC5/PWM.c ****     {
 259              		.loc 1 712 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 264              		.loc 1 713 0
 265 0000 014B     		ldr	r3, .L29
 266 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM.c ****     }
 267              		.loc 1 714 0
 268 0004 7047     		bx	lr
 269              	.L30:
 270 0006 00BF     		.align	2
 271              	.L29:
 272 0008 65650040 		.word	1073767781
 273              		.cfi_endproc
 274              	.LFE12:
 275              		.size	PWM_ReadStatusRegister, .-PWM_ReadStatusRegister
 276              		.section	.text.PWM_ReadControlRegister,"ax",%progbits
 277              		.align	2
 278              		.global	PWM_ReadControlRegister
 279              		.thumb
 280              		.thumb_func
 281              		.type	PWM_ReadControlRegister, %function
 282              	PWM_ReadControlRegister:
 283              	.LFB13:
 715:Generated_Source\PSoC5/PWM.c **** 
 716:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM.c **** 
 718:Generated_Source\PSoC5/PWM.c **** 
 719:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseControl)
 720:Generated_Source\PSoC5/PWM.c **** 
 721:Generated_Source\PSoC5/PWM.c **** 
 722:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadControlRegister
 724:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM.c ****     *
 726:Generated_Source\PSoC5/PWM.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM.c ****     *
 730:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM.c ****     *  None
 732:Generated_Source\PSoC5/PWM.c ****     *
 733:Generated_Source\PSoC5/PWM.c ****     * Return:
 734:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM.c ****     *
 736:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM.c ****     {
 284              		.loc 1 738 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 19


 739:Generated_Source\PSoC5/PWM.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM.c **** 
 741:Generated_Source\PSoC5/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 289              		.loc 1 741 0
 290 0000 014B     		ldr	r3, .L32
 291 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 292              	.LVL5:
 742:Generated_Source\PSoC5/PWM.c ****         return (result);
 743:Generated_Source\PSoC5/PWM.c ****     }
 293              		.loc 1 743 0
 294 0004 7047     		bx	lr
 295              	.L33:
 296 0006 00BF     		.align	2
 297              	.L32:
 298 0008 76650040 		.word	1073767798
 299              		.cfi_endproc
 300              	.LFE13:
 301              		.size	PWM_ReadControlRegister, .-PWM_ReadControlRegister
 302              		.section	.text.PWM_WriteControlRegister,"ax",%progbits
 303              		.align	2
 304              		.global	PWM_WriteControlRegister
 305              		.thumb
 306              		.thumb_func
 307              		.type	PWM_WriteControlRegister, %function
 308              	PWM_WriteControlRegister:
 309              	.LFB14:
 744:Generated_Source\PSoC5/PWM.c **** 
 745:Generated_Source\PSoC5/PWM.c **** 
 746:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM.c ****     *
 750:Generated_Source\PSoC5/PWM.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM.c ****     *
 754:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM.c ****     *
 761:Generated_Source\PSoC5/PWM.c ****     * Return:
 762:Generated_Source\PSoC5/PWM.c ****     *  None
 763:Generated_Source\PSoC5/PWM.c ****     *
 764:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM.c ****     {
 310              		.loc 1 766 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 315              	.LVL6:
 767:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 316              		.loc 1 767 0
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 20


 317 0000 014B     		ldr	r3, .L35
 318 0002 1870     		strb	r0, [r3]
 319 0004 7047     		bx	lr
 320              	.L36:
 321 0006 00BF     		.align	2
 322              	.L35:
 323 0008 76650040 		.word	1073767798
 324              		.cfi_endproc
 325              	.LFE14:
 326              		.size	PWM_WriteControlRegister, .-PWM_WriteControlRegister
 327              		.section	.text.PWM_ReadCapture,"ax",%progbits
 328              		.align	2
 329              		.global	PWM_ReadCapture
 330              		.thumb
 331              		.thumb_func
 332              		.type	PWM_ReadCapture, %function
 333              	PWM_ReadCapture:
 334              	.LFB15:
 768:Generated_Source\PSoC5/PWM.c ****     }
 769:Generated_Source\PSoC5/PWM.c **** 
 770:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseControl) */
 771:Generated_Source\PSoC5/PWM.c **** 
 772:Generated_Source\PSoC5/PWM.c **** 
 773:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM.c **** 
 775:Generated_Source\PSoC5/PWM.c **** 
 776:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCapture
 778:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM.c ****     *
 780:Generated_Source\PSoC5/PWM.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM.c ****     *
 783:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM.c ****     *  None
 785:Generated_Source\PSoC5/PWM.c ****     *
 786:Generated_Source\PSoC5/PWM.c ****     * Return:
 787:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM.c ****     *
 789:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM.c ****     uint16 PWM_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM.c ****     {
 335              		.loc 1 791 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG16(PWM_CAPTURE_LSB_PTR));
 340              		.loc 1 792 0
 341 0000 014B     		ldr	r3, .L38
 342 0002 1888     		ldrh	r0, [r3]
 793:Generated_Source\PSoC5/PWM.c ****     }
 343              		.loc 1 793 0
 344 0004 80B2     		uxth	r0, r0
 345 0006 7047     		bx	lr
 346              	.L39:
 347              		.align	2
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 21


 348              	.L38:
 349 0008 A86A0040 		.word	1073769128
 350              		.cfi_endproc
 351              	.LFE15:
 352              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 353              		.section	.text.PWM_ClearFIFO,"ax",%progbits
 354              		.align	2
 355              		.global	PWM_ClearFIFO
 356              		.thumb
 357              		.thumb_func
 358              		.type	PWM_ClearFIFO, %function
 359              	PWM_ClearFIFO:
 360              	.LFB6:
 454:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 361              		.loc 1 454 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 08B5     		push	{r3, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM.c ****             {
 369              		.loc 1 455 0
 370 0002 01E0     		b	.L41
 371              	.L42:
 457:Generated_Source\PSoC5/PWM.c ****             }
 372              		.loc 1 457 0
 373 0004 FFF7FEFF 		bl	PWM_ReadCapture
 374              	.LVL7:
 375              	.L41:
 455:Generated_Source\PSoC5/PWM.c ****             {
 376              		.loc 1 455 0
 377 0008 FFF7FEFF 		bl	PWM_ReadStatusRegister
 378              	.LVL8:
 379 000c 10F0100F 		tst	r0, #16
 380 0010 F8D1     		bne	.L42
 459:Generated_Source\PSoC5/PWM.c **** 
 381              		.loc 1 459 0
 382 0012 08BD     		pop	{r3, pc}
 383              		.cfi_endproc
 384              	.LFE6:
 385              		.size	PWM_ClearFIFO, .-PWM_ClearFIFO
 386              		.section	.text.PWM_Init,"ax",%progbits
 387              		.align	2
 388              		.global	PWM_Init
 389              		.thumb
 390              		.thumb_func
 391              		.type	PWM_Init, %function
 392              	PWM_Init:
 393              	.LFB1:
  85:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
 394              		.loc 1 85 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 22


 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 4, -8
 401              		.cfi_offset 14, -4
 117:Generated_Source\PSoC5/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 402              		.loc 1 117 0
 403 0002 164A     		ldr	r2, .L46
 404 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 405 0006 03F0C003 		and	r3, r3, #192
 406              	.LVL9:
 119:Generated_Source\PSoC5/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 407              		.loc 1 119 0
 408 000a 43F01903 		orr	r3, r3, #25
 409              	.LVL10:
 410 000e 1370     		strb	r3, [r2]
 129:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 411              		.loc 1 129 0
 412 0010 1E32     		adds	r2, r2, #30
 413 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 414 0014 43F00103 		orr	r3, r3, #1
 415 0018 1370     		strb	r3, [r2]
 130:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 416              		.loc 1 130 0
 417 001a 114C     		ldr	r4, .L46+4
 418 001c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 419 001e 43F00103 		orr	r3, r3, #1
 420 0022 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 421              		.loc 1 133 0
 422 0024 4FF4C870 		mov	r0, #400
 423 0028 FFF7FEFF 		bl	PWM_WriteCounter
 424              	.LVL11:
 136:Generated_Source\PSoC5/PWM.c **** 
 425              		.loc 1 136 0
 426 002c 4FF4C870 		mov	r0, #400
 427 0030 FFF7FEFF 		bl	PWM_WritePeriod
 428              	.LVL12:
 139:Generated_Source\PSoC5/PWM.c ****         #else
 429              		.loc 1 139 0
 430 0034 C820     		movs	r0, #200
 431 0036 FFF7FEFF 		bl	PWM_WriteCompare
 432              	.LVL13:
 150:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 433              		.loc 1 150 0
 434 003a 0920     		movs	r0, #9
 435 003c FFF7FEFF 		bl	PWM_WriteDeadTime
 436              	.LVL14:
 154:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 437              		.loc 1 154 0
 438 0040 0020     		movs	r0, #0
 439 0042 FFF7FEFF 		bl	PWM_SetInterruptMode
 440              	.LVL15:
 167:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 441              		.loc 1 167 0
 442 0046 FFF7FEFF 		bl	CyEnterCriticalSection
 443              	.LVL16:
 169:Generated_Source\PSoC5/PWM.c **** 
 444              		.loc 1 169 0
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 23


 445 004a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 446 004c 43F01003 		orr	r3, r3, #16
 447 0050 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM.c **** 
 448              		.loc 1 172 0
 449 0052 FFF7FEFF 		bl	CyExitCriticalSection
 450              	.LVL17:
 176:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 451              		.loc 1 176 0
 452 0056 FFF7FEFF 		bl	PWM_ClearFIFO
 453              	.LVL18:
 454 005a 10BD     		pop	{r4, pc}
 455              	.L47:
 456              		.align	2
 457              	.L46:
 458 005c 76650040 		.word	1073767798
 459 0060 95650040 		.word	1073767829
 460              		.cfi_endproc
 461              	.LFE1:
 462              		.size	PWM_Init, .-PWM_Init
 463              		.section	.text.PWM_Start,"ax",%progbits
 464              		.align	2
 465              		.global	PWM_Start
 466              		.thumb
 467              		.thumb_func
 468              		.type	PWM_Start, %function
 469              	PWM_Start:
 470              	.LFB0:
  56:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
 471              		.loc 1 56 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 08B5     		push	{r3, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM.c ****     {
 479              		.loc 1 58 0
 480 0002 054B     		ldr	r3, .L51
 481 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 482 0006 23B9     		cbnz	r3, .L49
  60:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
 483              		.loc 1 60 0
 484 0008 FFF7FEFF 		bl	PWM_Init
 485              	.LVL19:
  61:Generated_Source\PSoC5/PWM.c ****     }
 486              		.loc 1 61 0
 487 000c 0122     		movs	r2, #1
 488 000e 024B     		ldr	r3, .L51
 489 0010 1A70     		strb	r2, [r3]
 490              	.L49:
  63:Generated_Source\PSoC5/PWM.c **** 
 491              		.loc 1 63 0
 492 0012 FFF7FEFF 		bl	PWM_Enable
 493              	.LVL20:
 494 0016 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 24


 495              	.L52:
 496              		.align	2
 497              	.L51:
 498 0018 00000000 		.word	.LANCHOR0
 499              		.cfi_endproc
 500              	.LFE0:
 501              		.size	PWM_Start, .-PWM_Start
 502              		.section	.text.PWM_ReadCompare,"ax",%progbits
 503              		.align	2
 504              		.global	PWM_ReadCompare
 505              		.thumb
 506              		.thumb_func
 507              		.type	PWM_ReadCompare, %function
 508              	PWM_ReadCompare:
 509              	.LFB16:
 794:Generated_Source\PSoC5/PWM.c **** 
 795:Generated_Source\PSoC5/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM.c **** 
 797:Generated_Source\PSoC5/PWM.c **** 
 798:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM.c **** 
 800:Generated_Source\PSoC5/PWM.c **** 
 801:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare
 803:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM.c ****     *
 805:Generated_Source\PSoC5/PWM.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM.c ****     *
 809:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM.c ****     *  None
 811:Generated_Source\PSoC5/PWM.c ****     *
 812:Generated_Source\PSoC5/PWM.c ****     * Return:
 813:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM.c ****     *
 815:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM.c ****     uint16 PWM_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM.c ****     {
 510              		.loc 1 817 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM.c ****             return ((uint16)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM.c ****         #else
 821:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 515              		.loc 1 821 0
 516 0000 014B     		ldr	r3, .L54
 517 0002 1888     		ldrh	r0, [r3]
 822:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM.c ****     }
 518              		.loc 1 823 0
 519 0004 80B2     		uxth	r0, r0
 520 0006 7047     		bx	lr
 521              	.L55:
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 25


 522              		.align	2
 523              	.L54:
 524 0008 486A0040 		.word	1073769032
 525              		.cfi_endproc
 526              	.LFE16:
 527              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 528              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 529              		.align	2
 530              		.global	PWM_ReadPeriod
 531              		.thumb
 532              		.thumb_func
 533              		.type	PWM_ReadPeriod, %function
 534              	PWM_ReadPeriod:
 535              	.LFB17:
 824:Generated_Source\PSoC5/PWM.c **** 
 825:Generated_Source\PSoC5/PWM.c **** #else
 826:Generated_Source\PSoC5/PWM.c **** 
 827:Generated_Source\PSoC5/PWM.c **** 
 828:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM.c ****     *
 832:Generated_Source\PSoC5/PWM.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM.c ****     *
 835:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM.c ****     *  None
 837:Generated_Source\PSoC5/PWM.c ****     *
 838:Generated_Source\PSoC5/PWM.c ****     * Return:
 839:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM.c ****     *
 841:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM.c ****     uint16 PWM_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM.c ****     {
 844:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM.c ****     }
 846:Generated_Source\PSoC5/PWM.c **** 
 847:Generated_Source\PSoC5/PWM.c **** 
 848:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM.c ****     *
 852:Generated_Source\PSoC5/PWM.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM.c ****     *
 855:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM.c ****     *  None
 857:Generated_Source\PSoC5/PWM.c ****     *
 858:Generated_Source\PSoC5/PWM.c ****     * Return:
 859:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM.c ****     *
 861:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM.c ****     uint16 PWM_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM.c ****     {
 864:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG16(PWM_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM.c ****     }
 866:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 26


 867:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM.c **** 
 869:Generated_Source\PSoC5/PWM.c **** 
 870:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_ReadPeriod
 872:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM.c **** *
 874:Generated_Source\PSoC5/PWM.c **** * Summary:
 875:Generated_Source\PSoC5/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM.c **** *
 877:Generated_Source\PSoC5/PWM.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM.c **** *  None
 879:Generated_Source\PSoC5/PWM.c **** *
 880:Generated_Source\PSoC5/PWM.c **** * Return:
 881:Generated_Source\PSoC5/PWM.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM.c **** *
 883:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM.c **** uint16 PWM_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM.c **** {
 536              		.loc 1 885 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM.c ****         return ((uint16)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM.c ****     #else
 889:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 541              		.loc 1 889 0
 542 0000 014B     		ldr	r3, .L57
 543 0002 1888     		ldrh	r0, [r3]
 890:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM.c **** }
 544              		.loc 1 891 0
 545 0004 80B2     		uxth	r0, r0
 546 0006 7047     		bx	lr
 547              	.L58:
 548              		.align	2
 549              	.L57:
 550 0008 886A0040 		.word	1073769096
 551              		.cfi_endproc
 552              	.LFE17:
 553              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 554              		.global	PWM_initVar
 555              		.bss
 556              		.set	.LANCHOR0,. + 0
 557              		.type	PWM_initVar, %object
 558              		.size	PWM_initVar, 1
 559              	PWM_initVar:
 560 0000 00       		.space	1
 561              		.text
 562              	.Letext0:
 563              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 564              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 565              		.section	.debug_info,"",%progbits
 566              	.Ldebug_info0:
 567 0000 98030000 		.4byte	0x398
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 27


 568 0004 0400     		.2byte	0x4
 569 0006 00000000 		.4byte	.Ldebug_abbrev0
 570 000a 04       		.byte	0x4
 571 000b 01       		.uleb128 0x1
 572 000c 81010000 		.4byte	.LASF43
 573 0010 01       		.byte	0x1
 574 0011 25030000 		.4byte	.LASF44
 575 0015 75000000 		.4byte	.LASF45
 576 0019 00000000 		.4byte	.Ldebug_ranges0+0
 577 001d 00000000 		.4byte	0
 578 0021 00000000 		.4byte	.Ldebug_line0
 579 0025 02       		.uleb128 0x2
 580 0026 01       		.byte	0x1
 581 0027 06       		.byte	0x6
 582 0028 DE020000 		.4byte	.LASF0
 583 002c 02       		.uleb128 0x2
 584 002d 01       		.byte	0x1
 585 002e 08       		.byte	0x8
 586 002f C6000000 		.4byte	.LASF1
 587 0033 02       		.uleb128 0x2
 588 0034 02       		.byte	0x2
 589 0035 05       		.byte	0x5
 590 0036 94020000 		.4byte	.LASF2
 591 003a 02       		.uleb128 0x2
 592 003b 02       		.byte	0x2
 593 003c 07       		.byte	0x7
 594 003d 45000000 		.4byte	.LASF3
 595 0041 02       		.uleb128 0x2
 596 0042 04       		.byte	0x4
 597 0043 05       		.byte	0x5
 598 0044 B8020000 		.4byte	.LASF4
 599 0048 02       		.uleb128 0x2
 600 0049 04       		.byte	0x4
 601 004a 07       		.byte	0x7
 602 004b D9000000 		.4byte	.LASF5
 603 004f 02       		.uleb128 0x2
 604 0050 08       		.byte	0x8
 605 0051 05       		.byte	0x5
 606 0052 3D020000 		.4byte	.LASF6
 607 0056 02       		.uleb128 0x2
 608 0057 08       		.byte	0x8
 609 0058 07       		.byte	0x7
 610 0059 AF000000 		.4byte	.LASF7
 611 005d 03       		.uleb128 0x3
 612 005e 04       		.byte	0x4
 613 005f 05       		.byte	0x5
 614 0060 696E7400 		.ascii	"int\000"
 615 0064 02       		.uleb128 0x2
 616 0065 04       		.byte	0x4
 617 0066 07       		.byte	0x7
 618 0067 58000000 		.4byte	.LASF8
 619 006b 04       		.uleb128 0x4
 620 006c FB000000 		.4byte	.LASF9
 621 0070 02       		.byte	0x2
 622 0071 9201     		.2byte	0x192
 623 0073 2C000000 		.4byte	0x2c
 624 0077 04       		.uleb128 0x4
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 28


 625 0078 26010000 		.4byte	.LASF10
 626 007c 02       		.byte	0x2
 627 007d 9301     		.2byte	0x193
 628 007f 3A000000 		.4byte	0x3a
 629 0083 02       		.uleb128 0x2
 630 0084 04       		.byte	0x4
 631 0085 04       		.byte	0x4
 632 0086 A1000000 		.4byte	.LASF11
 633 008a 02       		.uleb128 0x2
 634 008b 08       		.byte	0x8
 635 008c 04       		.byte	0x4
 636 008d 0E010000 		.4byte	.LASF12
 637 0091 02       		.uleb128 0x2
 638 0092 01       		.byte	0x1
 639 0093 08       		.byte	0x8
 640 0094 C1020000 		.4byte	.LASF13
 641 0098 04       		.uleb128 0x4
 642 0099 D4000000 		.4byte	.LASF14
 643 009d 02       		.byte	0x2
 644 009e 3C02     		.2byte	0x23c
 645 00a0 A4000000 		.4byte	0xa4
 646 00a4 05       		.uleb128 0x5
 647 00a5 6B000000 		.4byte	0x6b
 648 00a9 04       		.uleb128 0x4
 649 00aa 00000000 		.4byte	.LASF15
 650 00ae 02       		.byte	0x2
 651 00af 3D02     		.2byte	0x23d
 652 00b1 B5000000 		.4byte	0xb5
 653 00b5 05       		.uleb128 0x5
 654 00b6 77000000 		.4byte	0x77
 655 00ba 02       		.uleb128 0x2
 656 00bb 04       		.byte	0x4
 657 00bc 07       		.byte	0x7
 658 00bd 34020000 		.4byte	.LASF16
 659 00c1 06       		.uleb128 0x6
 660 00c2 F2020000 		.4byte	.LASF17
 661 00c6 01       		.byte	0x1
 662 00c7 C7       		.byte	0xc7
 663 00c8 00000000 		.4byte	.LFB2
 664 00cc 10000000 		.4byte	.LFE2-.LFB2
 665 00d0 01       		.uleb128 0x1
 666 00d1 9C       		.byte	0x9c
 667 00d2 06       		.uleb128 0x6
 668 00d3 AF020000 		.4byte	.LASF18
 669 00d7 01       		.byte	0x1
 670 00d8 E9       		.byte	0xe9
 671 00d9 00000000 		.4byte	.LFB3
 672 00dd 10000000 		.4byte	.LFE3-.LFB3
 673 00e1 01       		.uleb128 0x1
 674 00e2 9C       		.byte	0x9c
 675 00e3 07       		.uleb128 0x7
 676 00e4 9E020000 		.4byte	.LASF19
 677 00e8 01       		.byte	0x1
 678 00e9 9301     		.2byte	0x193
 679 00eb 00000000 		.4byte	.LFB4
 680 00ef 0C000000 		.4byte	.LFE4-.LFB4
 681 00f3 01       		.uleb128 0x1
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 29


 682 00f4 9C       		.byte	0x9c
 683 00f5 08010000 		.4byte	0x108
 684 00f9 08       		.uleb128 0x8
 685 00fa A7000000 		.4byte	.LASF21
 686 00fe 01       		.byte	0x1
 687 00ff 9301     		.2byte	0x193
 688 0101 77000000 		.4byte	0x77
 689 0105 01       		.uleb128 0x1
 690 0106 50       		.byte	0x50
 691 0107 00       		.byte	0
 692 0108 09       		.uleb128 0x9
 693 0109 EB000000 		.4byte	.LASF27
 694 010d 01       		.byte	0x1
 695 010e A901     		.2byte	0x1a9
 696 0110 77000000 		.4byte	0x77
 697 0114 00000000 		.4byte	.LFB5
 698 0118 14000000 		.4byte	.LFE5-.LFB5
 699 011c 01       		.uleb128 0x1
 700 011d 9C       		.byte	0x9c
 701 011e 07       		.uleb128 0x7
 702 011f 0F020000 		.4byte	.LASF20
 703 0123 01       		.byte	0x1
 704 0124 E201     		.2byte	0x1e2
 705 0126 00000000 		.4byte	.LFB7
 706 012a 0C000000 		.4byte	.LFE7-.LFB7
 707 012e 01       		.uleb128 0x1
 708 012f 9C       		.byte	0x9c
 709 0130 43010000 		.4byte	0x143
 710 0134 08       		.uleb128 0x8
 711 0135 34000000 		.4byte	.LASF22
 712 0139 01       		.byte	0x1
 713 013a E201     		.2byte	0x1e2
 714 013c 77000000 		.4byte	0x77
 715 0140 01       		.uleb128 0x1
 716 0141 50       		.byte	0x50
 717 0142 00       		.byte	0
 718 0143 07       		.uleb128 0x7
 719 0144 15010000 		.4byte	.LASF23
 720 0148 01       		.byte	0x1
 721 0149 0402     		.2byte	0x204
 722 014b 00000000 		.4byte	.LFB8
 723 014f 0C000000 		.4byte	.LFE8-.LFB8
 724 0153 01       		.uleb128 0x1
 725 0154 9C       		.byte	0x9c
 726 0155 68010000 		.4byte	0x168
 727 0159 08       		.uleb128 0x8
 728 015a EA020000 		.4byte	.LASF24
 729 015e 01       		.byte	0x1
 730 015f 0402     		.2byte	0x204
 731 0161 77000000 		.4byte	0x77
 732 0165 01       		.uleb128 0x1
 733 0166 50       		.byte	0x50
 734 0167 00       		.byte	0
 735 0168 07       		.uleb128 0x7
 736 0169 59010000 		.4byte	.LASF25
 737 016d 01       		.byte	0x1
 738 016e 6402     		.2byte	0x264
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 30


 739 0170 00000000 		.4byte	.LFB9
 740 0174 0C000000 		.4byte	.LFE9-.LFB9
 741 0178 01       		.uleb128 0x1
 742 0179 9C       		.byte	0x9c
 743 017a 8D010000 		.4byte	0x18d
 744 017e 08       		.uleb128 0x8
 745 017f 2D010000 		.4byte	.LASF26
 746 0183 01       		.byte	0x1
 747 0184 6402     		.2byte	0x264
 748 0186 6B000000 		.4byte	0x6b
 749 018a 01       		.uleb128 0x1
 750 018b 50       		.byte	0x50
 751 018c 00       		.byte	0
 752 018d 09       		.uleb128 0x9
 753 018e 14030000 		.4byte	.LASF28
 754 0192 01       		.byte	0x1
 755 0193 8802     		.2byte	0x288
 756 0195 6B000000 		.4byte	0x6b
 757 0199 00000000 		.4byte	.LFB10
 758 019d 0C000000 		.4byte	.LFE10-.LFB10
 759 01a1 01       		.uleb128 0x1
 760 01a2 9C       		.byte	0x9c
 761 01a3 07       		.uleb128 0x7
 762 01a4 1F020000 		.4byte	.LASF29
 763 01a8 01       		.byte	0x1
 764 01a9 AC02     		.2byte	0x2ac
 765 01ab 00000000 		.4byte	.LFB11
 766 01af 0C000000 		.4byte	.LFE11-.LFB11
 767 01b3 01       		.uleb128 0x1
 768 01b4 9C       		.byte	0x9c
 769 01b5 C8010000 		.4byte	0x1c8
 770 01b9 08       		.uleb128 0x8
 771 01ba 4B020000 		.4byte	.LASF30
 772 01be 01       		.byte	0x1
 773 01bf AC02     		.2byte	0x2ac
 774 01c1 6B000000 		.4byte	0x6b
 775 01c5 01       		.uleb128 0x1
 776 01c6 50       		.byte	0x50
 777 01c7 00       		.byte	0
 778 01c8 09       		.uleb128 0x9
 779 01c9 FD020000 		.4byte	.LASF31
 780 01cd 01       		.byte	0x1
 781 01ce C702     		.2byte	0x2c7
 782 01d0 6B000000 		.4byte	0x6b
 783 01d4 00000000 		.4byte	.LFB12
 784 01d8 0C000000 		.4byte	.LFE12-.LFB12
 785 01dc 01       		.uleb128 0x1
 786 01dd 9C       		.byte	0x9c
 787 01de 0A       		.uleb128 0xa
 788 01df C6020000 		.4byte	.LASF46
 789 01e3 01       		.byte	0x1
 790 01e4 E102     		.2byte	0x2e1
 791 01e6 6B000000 		.4byte	0x6b
 792 01ea 00000000 		.4byte	.LFB13
 793 01ee 0C000000 		.4byte	.LFE13-.LFB13
 794 01f2 01       		.uleb128 0x1
 795 01f3 9C       		.byte	0x9c
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 31


 796 01f4 07020000 		.4byte	0x207
 797 01f8 0B       		.uleb128 0xb
 798 01f9 1F000000 		.4byte	.LASF37
 799 01fd 01       		.byte	0x1
 800 01fe E302     		.2byte	0x2e3
 801 0200 6B000000 		.4byte	0x6b
 802 0204 01       		.uleb128 0x1
 803 0205 50       		.byte	0x50
 804 0206 00       		.byte	0
 805 0207 07       		.uleb128 0x7
 806 0208 59020000 		.4byte	.LASF32
 807 020c 01       		.byte	0x1
 808 020d FD02     		.2byte	0x2fd
 809 020f 00000000 		.4byte	.LFB14
 810 0213 0C000000 		.4byte	.LFE14-.LFB14
 811 0217 01       		.uleb128 0x1
 812 0218 9C       		.byte	0x9c
 813 0219 2C020000 		.4byte	0x22c
 814 021d 08       		.uleb128 0x8
 815 021e 01010000 		.4byte	.LASF33
 816 0222 01       		.byte	0x1
 817 0223 FD02     		.2byte	0x2fd
 818 0225 6B000000 		.4byte	0x6b
 819 0229 01       		.uleb128 0x1
 820 022a 50       		.byte	0x50
 821 022b 00       		.byte	0
 822 022c 09       		.uleb128 0x9
 823 022d 65000000 		.4byte	.LASF34
 824 0231 01       		.byte	0x1
 825 0232 1603     		.2byte	0x316
 826 0234 77000000 		.4byte	0x77
 827 0238 00000000 		.4byte	.LFB15
 828 023c 0C000000 		.4byte	.LFE15-.LFB15
 829 0240 01       		.uleb128 0x1
 830 0241 9C       		.byte	0x9c
 831 0242 07       		.uleb128 0x7
 832 0243 26000000 		.4byte	.LASF35
 833 0247 01       		.byte	0x1
 834 0248 C501     		.2byte	0x1c5
 835 024a 00000000 		.4byte	.LFB6
 836 024e 14000000 		.4byte	.LFE6-.LFB6
 837 0252 01       		.uleb128 0x1
 838 0253 9C       		.byte	0x9c
 839 0254 6B020000 		.4byte	0x26b
 840 0258 0C       		.uleb128 0xc
 841 0259 08000000 		.4byte	.LVL7
 842 025d 2C020000 		.4byte	0x22c
 843 0261 0C       		.uleb128 0xc
 844 0262 0C000000 		.4byte	.LVL8
 845 0266 C8010000 		.4byte	0x1c8
 846 026a 00       		.byte	0
 847 026b 0D       		.uleb128 0xd
 848 026c 16000000 		.4byte	.LASF36
 849 0270 01       		.byte	0x1
 850 0271 54       		.byte	0x54
 851 0272 00000000 		.4byte	.LFB1
 852 0276 64000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 32


 853 027a 01       		.uleb128 0x1
 854 027b 9C       		.byte	0x9c
 855 027c 1E030000 		.4byte	0x31e
 856 0280 0E       		.uleb128 0xe
 857 0281 09010000 		.4byte	.LASF38
 858 0285 01       		.byte	0x1
 859 0286 57       		.byte	0x57
 860 0287 6B000000 		.4byte	0x6b
 861 028b 00000000 		.4byte	.LLST0
 862 028f 0E       		.uleb128 0xe
 863 0290 72020000 		.4byte	.LASF39
 864 0294 01       		.byte	0x1
 865 0295 5D       		.byte	0x5d
 866 0296 6B000000 		.4byte	0x6b
 867 029a 13000000 		.4byte	.LLST1
 868 029e 0F       		.uleb128 0xf
 869 029f 2C000000 		.4byte	.LVL11
 870 02a3 E3000000 		.4byte	0xe3
 871 02a7 B3020000 		.4byte	0x2b3
 872 02ab 10       		.uleb128 0x10
 873 02ac 01       		.uleb128 0x1
 874 02ad 50       		.byte	0x50
 875 02ae 03       		.uleb128 0x3
 876 02af 0A       		.byte	0xa
 877 02b0 9001     		.2byte	0x190
 878 02b2 00       		.byte	0
 879 02b3 0F       		.uleb128 0xf
 880 02b4 34000000 		.4byte	.LVL12
 881 02b8 1E010000 		.4byte	0x11e
 882 02bc C8020000 		.4byte	0x2c8
 883 02c0 10       		.uleb128 0x10
 884 02c1 01       		.uleb128 0x1
 885 02c2 50       		.byte	0x50
 886 02c3 03       		.uleb128 0x3
 887 02c4 0A       		.byte	0xa
 888 02c5 9001     		.2byte	0x190
 889 02c7 00       		.byte	0
 890 02c8 0F       		.uleb128 0xf
 891 02c9 3A000000 		.4byte	.LVL13
 892 02cd 43010000 		.4byte	0x143
 893 02d1 DC020000 		.4byte	0x2dc
 894 02d5 10       		.uleb128 0x10
 895 02d6 01       		.uleb128 0x1
 896 02d7 50       		.byte	0x50
 897 02d8 02       		.uleb128 0x2
 898 02d9 08       		.byte	0x8
 899 02da C8       		.byte	0xc8
 900 02db 00       		.byte	0
 901 02dc 0F       		.uleb128 0xf
 902 02dd 40000000 		.4byte	.LVL14
 903 02e1 68010000 		.4byte	0x168
 904 02e5 EF020000 		.4byte	0x2ef
 905 02e9 10       		.uleb128 0x10
 906 02ea 01       		.uleb128 0x1
 907 02eb 50       		.byte	0x50
 908 02ec 01       		.uleb128 0x1
 909 02ed 39       		.byte	0x39
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 33


 910 02ee 00       		.byte	0
 911 02ef 0F       		.uleb128 0xf
 912 02f0 46000000 		.4byte	.LVL15
 913 02f4 A3010000 		.4byte	0x1a3
 914 02f8 02030000 		.4byte	0x302
 915 02fc 10       		.uleb128 0x10
 916 02fd 01       		.uleb128 0x1
 917 02fe 50       		.byte	0x50
 918 02ff 01       		.uleb128 0x1
 919 0300 30       		.byte	0x30
 920 0301 00       		.byte	0
 921 0302 0C       		.uleb128 0xc
 922 0303 4A000000 		.4byte	.LVL16
 923 0307 83030000 		.4byte	0x383
 924 030b 0C       		.uleb128 0xc
 925 030c 56000000 		.4byte	.LVL17
 926 0310 8E030000 		.4byte	0x38e
 927 0314 0C       		.uleb128 0xc
 928 0315 5A000000 		.4byte	.LVL18
 929 0319 42020000 		.4byte	0x242
 930 031d 00       		.byte	0
 931 031e 0D       		.uleb128 0xd
 932 031f 3B000000 		.4byte	.LASF40
 933 0323 01       		.byte	0x1
 934 0324 37       		.byte	0x37
 935 0325 00000000 		.4byte	.LFB0
 936 0329 1C000000 		.4byte	.LFE0-.LFB0
 937 032d 01       		.uleb128 0x1
 938 032e 9C       		.byte	0x9c
 939 032f 46030000 		.4byte	0x346
 940 0333 0C       		.uleb128 0xc
 941 0334 0C000000 		.4byte	.LVL19
 942 0338 6B020000 		.4byte	0x26b
 943 033c 0C       		.uleb128 0xc
 944 033d 16000000 		.4byte	.LVL20
 945 0341 C1000000 		.4byte	0xc1
 946 0345 00       		.byte	0
 947 0346 09       		.uleb128 0x9
 948 0347 06000000 		.4byte	.LASF41
 949 034b 01       		.byte	0x1
 950 034c 3003     		.2byte	0x330
 951 034e 77000000 		.4byte	0x77
 952 0352 00000000 		.4byte	.LFB16
 953 0356 0C000000 		.4byte	.LFE16-.LFB16
 954 035a 01       		.uleb128 0x1
 955 035b 9C       		.byte	0x9c
 956 035c 09       		.uleb128 0x9
 957 035d 85020000 		.4byte	.LASF42
 958 0361 01       		.byte	0x1
 959 0362 7403     		.2byte	0x374
 960 0364 77000000 		.4byte	0x77
 961 0368 00000000 		.4byte	.LFB17
 962 036c 0C000000 		.4byte	.LFE17-.LFB17
 963 0370 01       		.uleb128 0x1
 964 0371 9C       		.byte	0x9c
 965 0372 11       		.uleb128 0x11
 966 0373 36010000 		.4byte	.LASF47
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 34


 967 0377 01       		.byte	0x1
 968 0378 20       		.byte	0x20
 969 0379 6B000000 		.4byte	0x6b
 970 037d 05       		.uleb128 0x5
 971 037e 03       		.byte	0x3
 972 037f 00000000 		.4byte	PWM_initVar
 973 0383 12       		.uleb128 0x12
 974 0384 42010000 		.4byte	.LASF48
 975 0388 03       		.byte	0x3
 976 0389 7D       		.byte	0x7d
 977 038a 6B000000 		.4byte	0x6b
 978 038e 13       		.uleb128 0x13
 979 038f 6B010000 		.4byte	.LASF49
 980 0393 03       		.byte	0x3
 981 0394 7E       		.byte	0x7e
 982 0395 14       		.uleb128 0x14
 983 0396 6B000000 		.4byte	0x6b
 984 039a 00       		.byte	0
 985 039b 00       		.byte	0
 986              		.section	.debug_abbrev,"",%progbits
 987              	.Ldebug_abbrev0:
 988 0000 01       		.uleb128 0x1
 989 0001 11       		.uleb128 0x11
 990 0002 01       		.byte	0x1
 991 0003 25       		.uleb128 0x25
 992 0004 0E       		.uleb128 0xe
 993 0005 13       		.uleb128 0x13
 994 0006 0B       		.uleb128 0xb
 995 0007 03       		.uleb128 0x3
 996 0008 0E       		.uleb128 0xe
 997 0009 1B       		.uleb128 0x1b
 998 000a 0E       		.uleb128 0xe
 999 000b 55       		.uleb128 0x55
 1000 000c 17       		.uleb128 0x17
 1001 000d 11       		.uleb128 0x11
 1002 000e 01       		.uleb128 0x1
 1003 000f 10       		.uleb128 0x10
 1004 0010 17       		.uleb128 0x17
 1005 0011 00       		.byte	0
 1006 0012 00       		.byte	0
 1007 0013 02       		.uleb128 0x2
 1008 0014 24       		.uleb128 0x24
 1009 0015 00       		.byte	0
 1010 0016 0B       		.uleb128 0xb
 1011 0017 0B       		.uleb128 0xb
 1012 0018 3E       		.uleb128 0x3e
 1013 0019 0B       		.uleb128 0xb
 1014 001a 03       		.uleb128 0x3
 1015 001b 0E       		.uleb128 0xe
 1016 001c 00       		.byte	0
 1017 001d 00       		.byte	0
 1018 001e 03       		.uleb128 0x3
 1019 001f 24       		.uleb128 0x24
 1020 0020 00       		.byte	0
 1021 0021 0B       		.uleb128 0xb
 1022 0022 0B       		.uleb128 0xb
 1023 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 35


 1024 0024 0B       		.uleb128 0xb
 1025 0025 03       		.uleb128 0x3
 1026 0026 08       		.uleb128 0x8
 1027 0027 00       		.byte	0
 1028 0028 00       		.byte	0
 1029 0029 04       		.uleb128 0x4
 1030 002a 16       		.uleb128 0x16
 1031 002b 00       		.byte	0
 1032 002c 03       		.uleb128 0x3
 1033 002d 0E       		.uleb128 0xe
 1034 002e 3A       		.uleb128 0x3a
 1035 002f 0B       		.uleb128 0xb
 1036 0030 3B       		.uleb128 0x3b
 1037 0031 05       		.uleb128 0x5
 1038 0032 49       		.uleb128 0x49
 1039 0033 13       		.uleb128 0x13
 1040 0034 00       		.byte	0
 1041 0035 00       		.byte	0
 1042 0036 05       		.uleb128 0x5
 1043 0037 35       		.uleb128 0x35
 1044 0038 00       		.byte	0
 1045 0039 49       		.uleb128 0x49
 1046 003a 13       		.uleb128 0x13
 1047 003b 00       		.byte	0
 1048 003c 00       		.byte	0
 1049 003d 06       		.uleb128 0x6
 1050 003e 2E       		.uleb128 0x2e
 1051 003f 00       		.byte	0
 1052 0040 3F       		.uleb128 0x3f
 1053 0041 19       		.uleb128 0x19
 1054 0042 03       		.uleb128 0x3
 1055 0043 0E       		.uleb128 0xe
 1056 0044 3A       		.uleb128 0x3a
 1057 0045 0B       		.uleb128 0xb
 1058 0046 3B       		.uleb128 0x3b
 1059 0047 0B       		.uleb128 0xb
 1060 0048 27       		.uleb128 0x27
 1061 0049 19       		.uleb128 0x19
 1062 004a 11       		.uleb128 0x11
 1063 004b 01       		.uleb128 0x1
 1064 004c 12       		.uleb128 0x12
 1065 004d 06       		.uleb128 0x6
 1066 004e 40       		.uleb128 0x40
 1067 004f 18       		.uleb128 0x18
 1068 0050 9742     		.uleb128 0x2117
 1069 0052 19       		.uleb128 0x19
 1070 0053 00       		.byte	0
 1071 0054 00       		.byte	0
 1072 0055 07       		.uleb128 0x7
 1073 0056 2E       		.uleb128 0x2e
 1074 0057 01       		.byte	0x1
 1075 0058 3F       		.uleb128 0x3f
 1076 0059 19       		.uleb128 0x19
 1077 005a 03       		.uleb128 0x3
 1078 005b 0E       		.uleb128 0xe
 1079 005c 3A       		.uleb128 0x3a
 1080 005d 0B       		.uleb128 0xb
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 36


 1081 005e 3B       		.uleb128 0x3b
 1082 005f 05       		.uleb128 0x5
 1083 0060 27       		.uleb128 0x27
 1084 0061 19       		.uleb128 0x19
 1085 0062 11       		.uleb128 0x11
 1086 0063 01       		.uleb128 0x1
 1087 0064 12       		.uleb128 0x12
 1088 0065 06       		.uleb128 0x6
 1089 0066 40       		.uleb128 0x40
 1090 0067 18       		.uleb128 0x18
 1091 0068 9742     		.uleb128 0x2117
 1092 006a 19       		.uleb128 0x19
 1093 006b 01       		.uleb128 0x1
 1094 006c 13       		.uleb128 0x13
 1095 006d 00       		.byte	0
 1096 006e 00       		.byte	0
 1097 006f 08       		.uleb128 0x8
 1098 0070 05       		.uleb128 0x5
 1099 0071 00       		.byte	0
 1100 0072 03       		.uleb128 0x3
 1101 0073 0E       		.uleb128 0xe
 1102 0074 3A       		.uleb128 0x3a
 1103 0075 0B       		.uleb128 0xb
 1104 0076 3B       		.uleb128 0x3b
 1105 0077 05       		.uleb128 0x5
 1106 0078 49       		.uleb128 0x49
 1107 0079 13       		.uleb128 0x13
 1108 007a 02       		.uleb128 0x2
 1109 007b 18       		.uleb128 0x18
 1110 007c 00       		.byte	0
 1111 007d 00       		.byte	0
 1112 007e 09       		.uleb128 0x9
 1113 007f 2E       		.uleb128 0x2e
 1114 0080 00       		.byte	0
 1115 0081 3F       		.uleb128 0x3f
 1116 0082 19       		.uleb128 0x19
 1117 0083 03       		.uleb128 0x3
 1118 0084 0E       		.uleb128 0xe
 1119 0085 3A       		.uleb128 0x3a
 1120 0086 0B       		.uleb128 0xb
 1121 0087 3B       		.uleb128 0x3b
 1122 0088 05       		.uleb128 0x5
 1123 0089 27       		.uleb128 0x27
 1124 008a 19       		.uleb128 0x19
 1125 008b 49       		.uleb128 0x49
 1126 008c 13       		.uleb128 0x13
 1127 008d 11       		.uleb128 0x11
 1128 008e 01       		.uleb128 0x1
 1129 008f 12       		.uleb128 0x12
 1130 0090 06       		.uleb128 0x6
 1131 0091 40       		.uleb128 0x40
 1132 0092 18       		.uleb128 0x18
 1133 0093 9742     		.uleb128 0x2117
 1134 0095 19       		.uleb128 0x19
 1135 0096 00       		.byte	0
 1136 0097 00       		.byte	0
 1137 0098 0A       		.uleb128 0xa
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 37


 1138 0099 2E       		.uleb128 0x2e
 1139 009a 01       		.byte	0x1
 1140 009b 3F       		.uleb128 0x3f
 1141 009c 19       		.uleb128 0x19
 1142 009d 03       		.uleb128 0x3
 1143 009e 0E       		.uleb128 0xe
 1144 009f 3A       		.uleb128 0x3a
 1145 00a0 0B       		.uleb128 0xb
 1146 00a1 3B       		.uleb128 0x3b
 1147 00a2 05       		.uleb128 0x5
 1148 00a3 27       		.uleb128 0x27
 1149 00a4 19       		.uleb128 0x19
 1150 00a5 49       		.uleb128 0x49
 1151 00a6 13       		.uleb128 0x13
 1152 00a7 11       		.uleb128 0x11
 1153 00a8 01       		.uleb128 0x1
 1154 00a9 12       		.uleb128 0x12
 1155 00aa 06       		.uleb128 0x6
 1156 00ab 40       		.uleb128 0x40
 1157 00ac 18       		.uleb128 0x18
 1158 00ad 9742     		.uleb128 0x2117
 1159 00af 19       		.uleb128 0x19
 1160 00b0 01       		.uleb128 0x1
 1161 00b1 13       		.uleb128 0x13
 1162 00b2 00       		.byte	0
 1163 00b3 00       		.byte	0
 1164 00b4 0B       		.uleb128 0xb
 1165 00b5 34       		.uleb128 0x34
 1166 00b6 00       		.byte	0
 1167 00b7 03       		.uleb128 0x3
 1168 00b8 0E       		.uleb128 0xe
 1169 00b9 3A       		.uleb128 0x3a
 1170 00ba 0B       		.uleb128 0xb
 1171 00bb 3B       		.uleb128 0x3b
 1172 00bc 05       		.uleb128 0x5
 1173 00bd 49       		.uleb128 0x49
 1174 00be 13       		.uleb128 0x13
 1175 00bf 02       		.uleb128 0x2
 1176 00c0 18       		.uleb128 0x18
 1177 00c1 00       		.byte	0
 1178 00c2 00       		.byte	0
 1179 00c3 0C       		.uleb128 0xc
 1180 00c4 898201   		.uleb128 0x4109
 1181 00c7 00       		.byte	0
 1182 00c8 11       		.uleb128 0x11
 1183 00c9 01       		.uleb128 0x1
 1184 00ca 31       		.uleb128 0x31
 1185 00cb 13       		.uleb128 0x13
 1186 00cc 00       		.byte	0
 1187 00cd 00       		.byte	0
 1188 00ce 0D       		.uleb128 0xd
 1189 00cf 2E       		.uleb128 0x2e
 1190 00d0 01       		.byte	0x1
 1191 00d1 3F       		.uleb128 0x3f
 1192 00d2 19       		.uleb128 0x19
 1193 00d3 03       		.uleb128 0x3
 1194 00d4 0E       		.uleb128 0xe
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 38


 1195 00d5 3A       		.uleb128 0x3a
 1196 00d6 0B       		.uleb128 0xb
 1197 00d7 3B       		.uleb128 0x3b
 1198 00d8 0B       		.uleb128 0xb
 1199 00d9 27       		.uleb128 0x27
 1200 00da 19       		.uleb128 0x19
 1201 00db 11       		.uleb128 0x11
 1202 00dc 01       		.uleb128 0x1
 1203 00dd 12       		.uleb128 0x12
 1204 00de 06       		.uleb128 0x6
 1205 00df 40       		.uleb128 0x40
 1206 00e0 18       		.uleb128 0x18
 1207 00e1 9742     		.uleb128 0x2117
 1208 00e3 19       		.uleb128 0x19
 1209 00e4 01       		.uleb128 0x1
 1210 00e5 13       		.uleb128 0x13
 1211 00e6 00       		.byte	0
 1212 00e7 00       		.byte	0
 1213 00e8 0E       		.uleb128 0xe
 1214 00e9 34       		.uleb128 0x34
 1215 00ea 00       		.byte	0
 1216 00eb 03       		.uleb128 0x3
 1217 00ec 0E       		.uleb128 0xe
 1218 00ed 3A       		.uleb128 0x3a
 1219 00ee 0B       		.uleb128 0xb
 1220 00ef 3B       		.uleb128 0x3b
 1221 00f0 0B       		.uleb128 0xb
 1222 00f1 49       		.uleb128 0x49
 1223 00f2 13       		.uleb128 0x13
 1224 00f3 02       		.uleb128 0x2
 1225 00f4 17       		.uleb128 0x17
 1226 00f5 00       		.byte	0
 1227 00f6 00       		.byte	0
 1228 00f7 0F       		.uleb128 0xf
 1229 00f8 898201   		.uleb128 0x4109
 1230 00fb 01       		.byte	0x1
 1231 00fc 11       		.uleb128 0x11
 1232 00fd 01       		.uleb128 0x1
 1233 00fe 31       		.uleb128 0x31
 1234 00ff 13       		.uleb128 0x13
 1235 0100 01       		.uleb128 0x1
 1236 0101 13       		.uleb128 0x13
 1237 0102 00       		.byte	0
 1238 0103 00       		.byte	0
 1239 0104 10       		.uleb128 0x10
 1240 0105 8A8201   		.uleb128 0x410a
 1241 0108 00       		.byte	0
 1242 0109 02       		.uleb128 0x2
 1243 010a 18       		.uleb128 0x18
 1244 010b 9142     		.uleb128 0x2111
 1245 010d 18       		.uleb128 0x18
 1246 010e 00       		.byte	0
 1247 010f 00       		.byte	0
 1248 0110 11       		.uleb128 0x11
 1249 0111 34       		.uleb128 0x34
 1250 0112 00       		.byte	0
 1251 0113 03       		.uleb128 0x3
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 39


 1252 0114 0E       		.uleb128 0xe
 1253 0115 3A       		.uleb128 0x3a
 1254 0116 0B       		.uleb128 0xb
 1255 0117 3B       		.uleb128 0x3b
 1256 0118 0B       		.uleb128 0xb
 1257 0119 49       		.uleb128 0x49
 1258 011a 13       		.uleb128 0x13
 1259 011b 3F       		.uleb128 0x3f
 1260 011c 19       		.uleb128 0x19
 1261 011d 02       		.uleb128 0x2
 1262 011e 18       		.uleb128 0x18
 1263 011f 00       		.byte	0
 1264 0120 00       		.byte	0
 1265 0121 12       		.uleb128 0x12
 1266 0122 2E       		.uleb128 0x2e
 1267 0123 00       		.byte	0
 1268 0124 3F       		.uleb128 0x3f
 1269 0125 19       		.uleb128 0x19
 1270 0126 03       		.uleb128 0x3
 1271 0127 0E       		.uleb128 0xe
 1272 0128 3A       		.uleb128 0x3a
 1273 0129 0B       		.uleb128 0xb
 1274 012a 3B       		.uleb128 0x3b
 1275 012b 0B       		.uleb128 0xb
 1276 012c 27       		.uleb128 0x27
 1277 012d 19       		.uleb128 0x19
 1278 012e 49       		.uleb128 0x49
 1279 012f 13       		.uleb128 0x13
 1280 0130 3C       		.uleb128 0x3c
 1281 0131 19       		.uleb128 0x19
 1282 0132 00       		.byte	0
 1283 0133 00       		.byte	0
 1284 0134 13       		.uleb128 0x13
 1285 0135 2E       		.uleb128 0x2e
 1286 0136 01       		.byte	0x1
 1287 0137 3F       		.uleb128 0x3f
 1288 0138 19       		.uleb128 0x19
 1289 0139 03       		.uleb128 0x3
 1290 013a 0E       		.uleb128 0xe
 1291 013b 3A       		.uleb128 0x3a
 1292 013c 0B       		.uleb128 0xb
 1293 013d 3B       		.uleb128 0x3b
 1294 013e 0B       		.uleb128 0xb
 1295 013f 27       		.uleb128 0x27
 1296 0140 19       		.uleb128 0x19
 1297 0141 3C       		.uleb128 0x3c
 1298 0142 19       		.uleb128 0x19
 1299 0143 00       		.byte	0
 1300 0144 00       		.byte	0
 1301 0145 14       		.uleb128 0x14
 1302 0146 05       		.uleb128 0x5
 1303 0147 00       		.byte	0
 1304 0148 49       		.uleb128 0x49
 1305 0149 13       		.uleb128 0x13
 1306 014a 00       		.byte	0
 1307 014b 00       		.byte	0
 1308 014c 00       		.byte	0
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 40


 1309              		.section	.debug_loc,"",%progbits
 1310              	.Ldebug_loc0:
 1311              	.LLST0:
 1312 0000 0A000000 		.4byte	.LVL9
 1313 0004 0E000000 		.4byte	.LVL10
 1314 0008 0100     		.2byte	0x1
 1315 000a 53       		.byte	0x53
 1316 000b 00000000 		.4byte	0
 1317 000f 00000000 		.4byte	0
 1318              	.LLST1:
 1319 0013 4A000000 		.4byte	.LVL16
 1320 0017 55000000 		.4byte	.LVL17-1
 1321 001b 0100     		.2byte	0x1
 1322 001d 50       		.byte	0x50
 1323 001e 00000000 		.4byte	0
 1324 0022 00000000 		.4byte	0
 1325              		.section	.debug_aranges,"",%progbits
 1326 0000 A4000000 		.4byte	0xa4
 1327 0004 0200     		.2byte	0x2
 1328 0006 00000000 		.4byte	.Ldebug_info0
 1329 000a 04       		.byte	0x4
 1330 000b 00       		.byte	0
 1331 000c 0000     		.2byte	0
 1332 000e 0000     		.2byte	0
 1333 0010 00000000 		.4byte	.LFB2
 1334 0014 10000000 		.4byte	.LFE2-.LFB2
 1335 0018 00000000 		.4byte	.LFB3
 1336 001c 10000000 		.4byte	.LFE3-.LFB3
 1337 0020 00000000 		.4byte	.LFB4
 1338 0024 0C000000 		.4byte	.LFE4-.LFB4
 1339 0028 00000000 		.4byte	.LFB5
 1340 002c 14000000 		.4byte	.LFE5-.LFB5
 1341 0030 00000000 		.4byte	.LFB7
 1342 0034 0C000000 		.4byte	.LFE7-.LFB7
 1343 0038 00000000 		.4byte	.LFB8
 1344 003c 0C000000 		.4byte	.LFE8-.LFB8
 1345 0040 00000000 		.4byte	.LFB9
 1346 0044 0C000000 		.4byte	.LFE9-.LFB9
 1347 0048 00000000 		.4byte	.LFB10
 1348 004c 0C000000 		.4byte	.LFE10-.LFB10
 1349 0050 00000000 		.4byte	.LFB11
 1350 0054 0C000000 		.4byte	.LFE11-.LFB11
 1351 0058 00000000 		.4byte	.LFB12
 1352 005c 0C000000 		.4byte	.LFE12-.LFB12
 1353 0060 00000000 		.4byte	.LFB13
 1354 0064 0C000000 		.4byte	.LFE13-.LFB13
 1355 0068 00000000 		.4byte	.LFB14
 1356 006c 0C000000 		.4byte	.LFE14-.LFB14
 1357 0070 00000000 		.4byte	.LFB15
 1358 0074 0C000000 		.4byte	.LFE15-.LFB15
 1359 0078 00000000 		.4byte	.LFB6
 1360 007c 14000000 		.4byte	.LFE6-.LFB6
 1361 0080 00000000 		.4byte	.LFB1
 1362 0084 64000000 		.4byte	.LFE1-.LFB1
 1363 0088 00000000 		.4byte	.LFB0
 1364 008c 1C000000 		.4byte	.LFE0-.LFB0
 1365 0090 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 41


 1366 0094 0C000000 		.4byte	.LFE16-.LFB16
 1367 0098 00000000 		.4byte	.LFB17
 1368 009c 0C000000 		.4byte	.LFE17-.LFB17
 1369 00a0 00000000 		.4byte	0
 1370 00a4 00000000 		.4byte	0
 1371              		.section	.debug_ranges,"",%progbits
 1372              	.Ldebug_ranges0:
 1373 0000 00000000 		.4byte	.LFB2
 1374 0004 10000000 		.4byte	.LFE2
 1375 0008 00000000 		.4byte	.LFB3
 1376 000c 10000000 		.4byte	.LFE3
 1377 0010 00000000 		.4byte	.LFB4
 1378 0014 0C000000 		.4byte	.LFE4
 1379 0018 00000000 		.4byte	.LFB5
 1380 001c 14000000 		.4byte	.LFE5
 1381 0020 00000000 		.4byte	.LFB7
 1382 0024 0C000000 		.4byte	.LFE7
 1383 0028 00000000 		.4byte	.LFB8
 1384 002c 0C000000 		.4byte	.LFE8
 1385 0030 00000000 		.4byte	.LFB9
 1386 0034 0C000000 		.4byte	.LFE9
 1387 0038 00000000 		.4byte	.LFB10
 1388 003c 0C000000 		.4byte	.LFE10
 1389 0040 00000000 		.4byte	.LFB11
 1390 0044 0C000000 		.4byte	.LFE11
 1391 0048 00000000 		.4byte	.LFB12
 1392 004c 0C000000 		.4byte	.LFE12
 1393 0050 00000000 		.4byte	.LFB13
 1394 0054 0C000000 		.4byte	.LFE13
 1395 0058 00000000 		.4byte	.LFB14
 1396 005c 0C000000 		.4byte	.LFE14
 1397 0060 00000000 		.4byte	.LFB15
 1398 0064 0C000000 		.4byte	.LFE15
 1399 0068 00000000 		.4byte	.LFB6
 1400 006c 14000000 		.4byte	.LFE6
 1401 0070 00000000 		.4byte	.LFB1
 1402 0074 64000000 		.4byte	.LFE1
 1403 0078 00000000 		.4byte	.LFB0
 1404 007c 1C000000 		.4byte	.LFE0
 1405 0080 00000000 		.4byte	.LFB16
 1406 0084 0C000000 		.4byte	.LFE16
 1407 0088 00000000 		.4byte	.LFB17
 1408 008c 0C000000 		.4byte	.LFE17
 1409 0090 00000000 		.4byte	0
 1410 0094 00000000 		.4byte	0
 1411              		.section	.debug_line,"",%progbits
 1412              	.Ldebug_line0:
 1413 0000 A8010000 		.section	.debug_str,"MS",%progbits,1
 1413      02004B00 
 1413      00000201 
 1413      FB0E0D00 
 1413      01010101 
 1414              	.LASF15:
 1415 0000 72656731 		.ascii	"reg16\000"
 1415      3600
 1416              	.LASF41:
 1417 0006 50574D5F 		.ascii	"PWM_ReadCompare\000"
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 42


 1417      52656164 
 1417      436F6D70 
 1417      61726500 
 1418              	.LASF36:
 1419 0016 50574D5F 		.ascii	"PWM_Init\000"
 1419      496E6974 
 1419      00
 1420              	.LASF37:
 1421 001f 72657375 		.ascii	"result\000"
 1421      6C7400
 1422              	.LASF35:
 1423 0026 50574D5F 		.ascii	"PWM_ClearFIFO\000"
 1423      436C6561 
 1423      72464946 
 1423      4F00
 1424              	.LASF22:
 1425 0034 70657269 		.ascii	"period\000"
 1425      6F6400
 1426              	.LASF40:
 1427 003b 50574D5F 		.ascii	"PWM_Start\000"
 1427      53746172 
 1427      7400
 1428              	.LASF3:
 1429 0045 73686F72 		.ascii	"short unsigned int\000"
 1429      7420756E 
 1429      7369676E 
 1429      65642069 
 1429      6E7400
 1430              	.LASF8:
 1431 0058 756E7369 		.ascii	"unsigned int\000"
 1431      676E6564 
 1431      20696E74 
 1431      00
 1432              	.LASF34:
 1433 0065 50574D5F 		.ascii	"PWM_ReadCapture\000"
 1433      52656164 
 1433      43617074 
 1433      75726500 
 1434              	.LASF45:
 1435 0075 433A5C70 		.ascii	"C:\\projects\\POVDisplay\\POVBaseHBridge.cydsn\000"
 1435      726F6A65 
 1435      6374735C 
 1435      504F5644 
 1435      6973706C 
 1436              	.LASF11:
 1437 00a1 666C6F61 		.ascii	"float\000"
 1437      7400
 1438              	.LASF21:
 1439 00a7 636F756E 		.ascii	"counter\000"
 1439      74657200 
 1440              	.LASF7:
 1441 00af 6C6F6E67 		.ascii	"long long unsigned int\000"
 1441      206C6F6E 
 1441      6720756E 
 1441      7369676E 
 1441      65642069 
 1442              	.LASF1:
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 43


 1443 00c6 756E7369 		.ascii	"unsigned char\000"
 1443      676E6564 
 1443      20636861 
 1443      7200
 1444              	.LASF14:
 1445 00d4 72656738 		.ascii	"reg8\000"
 1445      00
 1446              	.LASF5:
 1447 00d9 6C6F6E67 		.ascii	"long unsigned int\000"
 1447      20756E73 
 1447      69676E65 
 1447      6420696E 
 1447      7400
 1448              	.LASF27:
 1449 00eb 50574D5F 		.ascii	"PWM_ReadCounter\000"
 1449      52656164 
 1449      436F756E 
 1449      74657200 
 1450              	.LASF9:
 1451 00fb 75696E74 		.ascii	"uint8\000"
 1451      3800
 1452              	.LASF33:
 1453 0101 636F6E74 		.ascii	"control\000"
 1453      726F6C00 
 1454              	.LASF38:
 1455 0109 6374726C 		.ascii	"ctrl\000"
 1455      00
 1456              	.LASF12:
 1457 010e 646F7562 		.ascii	"double\000"
 1457      6C6500
 1458              	.LASF23:
 1459 0115 50574D5F 		.ascii	"PWM_WriteCompare\000"
 1459      57726974 
 1459      65436F6D 
 1459      70617265 
 1459      00
 1460              	.LASF10:
 1461 0126 75696E74 		.ascii	"uint16\000"
 1461      313600
 1462              	.LASF26:
 1463 012d 64656164 		.ascii	"deadtime\000"
 1463      74696D65 
 1463      00
 1464              	.LASF47:
 1465 0136 50574D5F 		.ascii	"PWM_initVar\000"
 1465      696E6974 
 1465      56617200 
 1466              	.LASF48:
 1467 0142 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1467      74657243 
 1467      72697469 
 1467      63616C53 
 1467      65637469 
 1468              	.LASF25:
 1469 0159 50574D5F 		.ascii	"PWM_WriteDeadTime\000"
 1469      57726974 
 1469      65446561 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 44


 1469      6454696D 
 1469      6500
 1470              	.LASF49:
 1471 016b 43794578 		.ascii	"CyExitCriticalSection\000"
 1471      69744372 
 1471      69746963 
 1471      616C5365 
 1471      6374696F 
 1472              	.LASF43:
 1473 0181 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1473      4320342E 
 1473      392E3320 
 1473      32303135 
 1473      30333033 
 1474 01b4 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1474      20726576 
 1474      6973696F 
 1474      6E203232 
 1474      31323230 
 1475 01e7 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1475      66756E63 
 1475      74696F6E 
 1475      2D736563 
 1475      74696F6E 
 1476              	.LASF20:
 1477 020f 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1477      57726974 
 1477      65506572 
 1477      696F6400 
 1478              	.LASF29:
 1479 021f 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 1479      53657449 
 1479      6E746572 
 1479      72757074 
 1479      4D6F6465 
 1480              	.LASF16:
 1481 0234 73697A65 		.ascii	"sizetype\000"
 1481      74797065 
 1481      00
 1482              	.LASF6:
 1483 023d 6C6F6E67 		.ascii	"long long int\000"
 1483      206C6F6E 
 1483      6720696E 
 1483      7400
 1484              	.LASF30:
 1485 024b 696E7465 		.ascii	"interruptMode\000"
 1485      72727570 
 1485      744D6F64 
 1485      6500
 1486              	.LASF32:
 1487 0259 50574D5F 		.ascii	"PWM_WriteControlRegister\000"
 1487      57726974 
 1487      65436F6E 
 1487      74726F6C 
 1487      52656769 
 1488              	.LASF39:
 1489 0272 50574D5F 		.ascii	"PWM_interruptState\000"
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 45


 1489      696E7465 
 1489      72727570 
 1489      74537461 
 1489      746500
 1490              	.LASF42:
 1491 0285 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1491      52656164 
 1491      50657269 
 1491      6F6400
 1492              	.LASF2:
 1493 0294 73686F72 		.ascii	"short int\000"
 1493      7420696E 
 1493      7400
 1494              	.LASF19:
 1495 029e 50574D5F 		.ascii	"PWM_WriteCounter\000"
 1495      57726974 
 1495      65436F75 
 1495      6E746572 
 1495      00
 1496              	.LASF18:
 1497 02af 50574D5F 		.ascii	"PWM_Stop\000"
 1497      53746F70 
 1497      00
 1498              	.LASF4:
 1499 02b8 6C6F6E67 		.ascii	"long int\000"
 1499      20696E74 
 1499      00
 1500              	.LASF13:
 1501 02c1 63686172 		.ascii	"char\000"
 1501      00
 1502              	.LASF46:
 1503 02c6 50574D5F 		.ascii	"PWM_ReadControlRegister\000"
 1503      52656164 
 1503      436F6E74 
 1503      726F6C52 
 1503      65676973 
 1504              	.LASF0:
 1505 02de 7369676E 		.ascii	"signed char\000"
 1505      65642063 
 1505      68617200 
 1506              	.LASF24:
 1507 02ea 636F6D70 		.ascii	"compare\000"
 1507      61726500 
 1508              	.LASF17:
 1509 02f2 50574D5F 		.ascii	"PWM_Enable\000"
 1509      456E6162 
 1509      6C6500
 1510              	.LASF31:
 1511 02fd 50574D5F 		.ascii	"PWM_ReadStatusRegister\000"
 1511      52656164 
 1511      53746174 
 1511      75735265 
 1511      67697374 
 1512              	.LASF28:
 1513 0314 50574D5F 		.ascii	"PWM_ReadDeadTime\000"
 1513      52656164 
 1513      44656164 
ARM GAS  C:\Users\NICKBU~1\AppData\Local\Temp\ccgaX3fy.s 			page 46


 1513      54696D65 
 1513      00
 1514              	.LASF44:
 1515 0325 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM.c\000"
 1515      72617465 
 1515      645F536F 
 1515      75726365 
 1515      5C50536F 
 1516              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
