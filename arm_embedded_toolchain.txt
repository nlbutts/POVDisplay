INCLUDE(CMakeForceCompiler)

####
# Uncompress the toolchain
####
message("Checking to see if you have an uncompressed toolchain")
if (EXISTS ${CMAKE_CURRENT_LIST_DIR}/toolchain/bin/arm-none-eabi-gcc)
    message("Toolchain exists")
else (EXISTS ${CMAKE_CURRENT_LIST_DIR}/toolchain/bin/arm-none-eabi-gcc)
    if (UNIX)
        message("Uncompressing the toolchain")
        execute_process(COMMAND tar -xJf arm-none-eabi.tar.xz WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/toolchain)
    else (UNIX)
        message("Please uncompressed the gcc_arm_none_eabi_X.Y.Z._win32.tar.bz2 into the toolchain directory. This should result in bin, lib, and other directories")
    endif (UNIX)
endif (EXISTS ${CMAKE_CURRENT_LIST_DIR}/toolchain/bin/arm-none-eabi-gcc)


# this one is important
SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_PROCESSOR arm_baremetal)

# specify the cross compiler
get_filename_component(CC ${CMAKE_HOME_DIRECTORY}/toolchain/bin/arm-none-eabi-gcc ABSOLUTE)
get_filename_component(CXX ${CMAKE_HOME_DIRECTORY}/toolchain/bin/arm-none-eabi-g++ ABSOLUTE)
get_filename_component(OC ${CMAKE_HOME_DIRECTORY}/toolchain/bin/arm-none-eabi-objcopy ABSOLUTE)
get_filename_component(SIZE ${CMAKE_HOME_DIRECTORY}/toolchain/bin/arm-none-eabi-size ABSOLUTE)

set(SREC srec_cat)
CMAKE_FORCE_C_COMPILER(${CC} GNU)
CMAKE_FORCE_CXX_COMPILER(${CXX} GNU)

SET(ASM_OPTIONS "-x assembler-with-cpp")
#SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
SET(CMAKE_ASM_FLAGS "${ASM_OPTIONS}" )

# where is the target environment
SET(CMAKE_FIND_ROOT_PATH  ${CMAKE_HOME_DIRECTORY}/toolchain/ )

# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
